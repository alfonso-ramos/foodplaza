package asedi.controllers;

import asedi.model.Producto;
import asedi.services.CarritoService;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.Label;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.util.Map;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.application.Platform;

import java.io.IOException;
import java.util.Optional;

public class CarritoController {

    @FXML private VBox itemsContainer;
    @FXML private Label subtotalLabel;
    @FXML private Label ivaLabel;
    @FXML private Label totalLabel;
    @FXML private Label itemCountLabel;
    @FXML private Button procederPagoButton;
    @FXML private VBox emptyCartContainer;
    @FXML private VBox cartItemsContainer;
    @FXML private HBox cartSummaryContainer;
    @FXML private StackPane loadingOverlay;
    @FXML private Label loadingText;
    
    private Stage stage;

    private final CarritoService carritoService = CarritoService.getInstance();

    @FXML
    public void initialize() {
        cargarCarrito();
    }

    private void cargarCarrito() {
        itemsContainer.getChildren().clear();
        Map<Producto, Integer> items = carritoService.getItems();
        
        if (items.isEmpty()) {
            Label emptyLabel = new Label("Tu carrito está vacío");
            emptyLabel.setStyle("-fx-font-size: 16px; -fx-text-fill: #6c757d; -fx-padding: 20;");
            itemsContainer.getChildren().add(emptyLabel);
        } else {
            try {
                for (Map.Entry<Producto, Integer> entry : items.entrySet()) {
                    FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/components/carritoItem.fxml"));
                    Parent itemNode = loader.load();
                    CarritoItemController controller = loader.getController();
                    controller.setProducto(entry.getKey());
                    controller.setCantidad(entry.getValue());
                    controller.setOnUpdateCallback(this::actualizarVista);
                    itemsContainer.getChildren().add(itemNode);
                }
            } catch (IOException e) {
                e.printStackTrace();
                mostrarError("Error al cargar los items del carrito");
            }
        }
        actualizarVista();
    }

    /**
     * Muestra u oculta la interfaz de carrito vacío
     * @param mostrar true para mostrar el carrito vacío, false para mostrarlo con productos
     */
    private void mostrarCarritoVacio(boolean mostrar) {
        if (emptyCartContainer != null) emptyCartContainer.setVisible(mostrar);
        if (cartItemsContainer != null) cartItemsContainer.setVisible(!mostrar);
        if (procederPagoButton != null) procederPagoButton.setDisable(mostrar);
    }
    
    /**
     * Actualiza la vista con los totales actuales del carrito
     */
    private void actualizarVista() {
        double subtotal = carritoService.getSubtotal();
        double iva = subtotal * 0.16; // 16% IVA
        double total = subtotal + iva;
        int totalItems = carritoService.getCantidadTotal();
        
        Platform.runLater(() -> {
            if (subtotalLabel != null) subtotalLabel.setText(String.format("$%.2f", subtotal));
            if (ivaLabel != null) ivaLabel.setText(String.format("$%.2f", iva));
            if (totalLabel != null) totalLabel.setText(String.format("$%.2f", total));
            if (itemCountLabel != null) {
                itemCountLabel.setText(String.format("%d %s", totalItems, totalItems == 1 ? "producto" : "productos"));
            }
            
            // Actualizar visibilidad según el estado del carrito
            mostrarCarritoVacio(totalItems == 0);
            
            // Notificar al dashboard para actualizar el badge
            notificarActualizacionCarrito();
        });
    }
    
    /**
     * Notifica al dashboard sobre cambios en el carrito
     */
    private void notificarActualizacionCarrito() {
        if (stage != null && stage.getOwner() != null) {
            Stage ownerStage = (Stage) stage.getOwner();
            if (ownerStage.getScene() != null && ownerStage.getScene().getUserData() instanceof UsuarioDashboardController) {
                UsuarioDashboardController dashboardController = (UsuarioDashboardController) ownerStage.getScene().getUserData();
                dashboardController.actualizarBadgeCarrito();
            }
        }
    }
    
    /**
     * Notifica al dashboard que el carrito se está cerrando
     */
    private void notificarCierreCarrito() {
        notificarActualizacionCarrito();
    }
    
    @FXML
    private void volver() {
        // Notificar antes de cerrar
        notificarCierreCarrito();
        
        // Cerrar la ventana
        Stage stage = (Stage) itemsContainer.getScene().getWindow();
        stage.close();
    }

    @FXML
    private void procederAlPago() {
        if (carritoService.estaVacio()) {
            mostrarError("El carrito está vacío");
            return;
        }
        
        // Pedir instrucciones especiales al usuario (opcional)
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("Instrucciones Especiales");
        dialog.setHeaderText("¿Alguna instrucción especial para tu pedido?");
        dialog.setContentText("Instrucciones (opcional):");
        
        // Mostrar diálogo y esperar respuesta
        Optional<String> result = dialog.showAndWait();
        String instrucciones = result.orElse("");
        
        mostrarCarga(true, "Procesando pedido...");
        
        // Obtener el ID del local (asumiendo que está disponible en el controlador)
        // Si no está disponible, necesitarás obtenerlo de alguna otra manera
        Long idLocal = obtenerIdLocalActual(); // Necesitarás implementar este método
        
        if (idLocal == null) {
            mostrarCarga(false, "");
            mostrarError("No se pudo determinar el local. Por favor, inténtalo de nuevo.");
            return;
        }
        
        // Enviar el pedido en un hilo separado
        new Thread(() -> {
            try {
                boolean exito = carritoService.enviarPedido(idLocal, instrucciones);
                
                Platform.runLater(() -> {
                    mostrarCarga(false, "");
                    
                    if (exito) {
                        // Mostrar mensaje de éxito
                        Alert alert = new Alert(Alert.AlertType.INFORMATION);
                        alert.setTitle("¡Pedido Realizado!");
                        alert.setHeaderText("Gracias por tu compra");
                        alert.setContentText("Tu pedido ha sido procesado exitosamente. Recibirás un correo con los detalles de tu compra.");
                        alert.showAndWait();
                        
                        // Notificar actualización del carrito (ya se limpió en enviarPedido)
                        notificarActualizacionCarrito();
                        volver();
                    } else {
                        mostrarError("No se pudo procesar el pedido. Por favor, inténtalo de nuevo.");
                    }
                });
            } catch (Exception e) {
                Platform.runLater(() -> {
                    mostrarCarga(false, "");
                    mostrarError("Error al procesar el pedido: " + e.getMessage());
                    e.printStackTrace();
                });
            }
        }).start();
    }
    
    /**
     * Obtiene el ID del local actual.
     * En una implementación real, esto debería obtenerse del contexto actual de la aplicación.
     * Por ahora, devolvemos un valor fijo o null para pruebas.
     * 
     * @return El ID del local o null si no se puede determinar
     */
    private Long obtenerIdLocalActual() {
        // TODO: Implementar la lógica real para obtener el ID del local actual
        // Esto podría venir de la navegación actual, de la sesión, o de otro servicio
        
        // Ejemplo: devolver un ID fijo para pruebas
        // return 1L; // Descomenta y ajusta según sea necesario
        
        // O si tienes un servicio de navegación o contexto que guarda el local actual:
        // return NavigationService.getLocalActualId();
        
        // Por ahora, devolvemos null para que falle de manera controlada
        return null;
    }

    private void mostrarError(String mensaje) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText(mensaje);
            alert.showAndWait();
        });
    }
    
    private void mostrarCarga(boolean mostrar, String mensaje) {
        Platform.runLater(() -> {
            loadingOverlay.setVisible(mostrar);
            loadingText.setText(mensaje);
            loadingOverlay.setMouseTransparent(!mostrar);
        });
    }
    

}